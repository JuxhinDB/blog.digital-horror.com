<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Tokio Mutex</text><text id="details" fill="rgb(0,0,0)" x="10" y="421.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="421.00"> </text><svg id="frames" x="10" width="1180" total_samples="1107"><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.09%)</title><rect x="0.2710%" y="133" width="0.0903%" height="15" fill="rgb(253,117,3)" fg:x="3" fg:w="1"/><text x="0.5210%" y="143.50"></text></g><g><title>tokio::task::local::LocalSet::tick (1 samples, 0.09%)</title><rect x="0.2710%" y="117" width="0.0903%" height="15" fill="rgb(241,127,19)" fg:x="3" fg:w="1"/><text x="0.5210%" y="127.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1 samples, 0.09%)</title><rect x="0.2710%" y="101" width="0.0903%" height="15" fill="rgb(218,103,12)" fg:x="3" fg:w="1"/><text x="0.5210%" y="111.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (1 samples, 0.09%)</title><rect x="0.2710%" y="85" width="0.0903%" height="15" fill="rgb(236,214,43)" fg:x="3" fg:w="1"/><text x="0.5210%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.09%)</title><rect x="0.2710%" y="69" width="0.0903%" height="15" fill="rgb(244,144,19)" fg:x="3" fg:w="1"/><text x="0.5210%" y="79.50"></text></g><g><title>&lt;tokio::runtime::task::abort::AbortHandle as core::ops::drop::Drop&gt;::drop (1 samples, 0.09%)</title><rect x="0.3613%" y="133" width="0.0903%" height="15" fill="rgb(246,188,10)" fg:x="4" fg:w="1"/><text x="0.6113%" y="143.50"></text></g><g><title>cfree (3 samples, 0.27%)</title><rect x="0.4517%" y="53" width="0.2710%" height="15" fill="rgb(212,193,33)" fg:x="5" fg:w="3"/><text x="0.7017%" y="63.50"></text></g><g><title>&lt;tokio::task::local::LocalSet as core::ops::drop::Drop&gt;::drop (4 samples, 0.36%)</title><rect x="0.4517%" y="133" width="0.3613%" height="15" fill="rgb(241,51,29)" fg:x="5" fg:w="4"/><text x="0.7017%" y="143.50"></text></g><g><title>&lt;tokio::task::local::LocalSet as core::ops::drop::Drop&gt;::drop::{{closure}} (4 samples, 0.36%)</title><rect x="0.4517%" y="117" width="0.3613%" height="15" fill="rgb(211,58,19)" fg:x="5" fg:w="4"/><text x="0.7017%" y="127.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::shutdown (4 samples, 0.36%)</title><rect x="0.4517%" y="101" width="0.3613%" height="15" fill="rgb(229,111,26)" fg:x="5" fg:w="4"/><text x="0.7017%" y="111.50"></text></g><g><title>std::panicking::try (4 samples, 0.36%)</title><rect x="0.4517%" y="85" width="0.3613%" height="15" fill="rgb(213,115,40)" fg:x="5" fg:w="4"/><text x="0.7017%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Stage&lt;mutex_buffered_client::mutex_actor::{{closure}}&gt;&gt; (4 samples, 0.36%)</title><rect x="0.4517%" y="69" width="0.3613%" height="15" fill="rgb(209,56,44)" fg:x="5" fg:w="4"/><text x="0.7017%" y="79.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::net::tcp::stream::TcpStream::connect_mio::{{closure}}&gt; (1 samples, 0.09%)</title><rect x="0.7227%" y="53" width="0.0903%" height="15" fill="rgb(230,108,32)" fg:x="8" fg:w="1"/><text x="0.9727%" y="63.50"></text></g><g><title>close (1 samples, 0.09%)</title><rect x="0.7227%" y="37" width="0.0903%" height="15" fill="rgb(216,165,31)" fg:x="8" fg:w="1"/><text x="0.9727%" y="47.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (6 samples, 0.54%)</title><rect x="0.8130%" y="133" width="0.5420%" height="15" fill="rgb(218,122,21)" fg:x="9" fg:w="6"/><text x="1.0630%" y="143.50"></text></g><g><title>cfree (6 samples, 0.54%)</title><rect x="0.8130%" y="117" width="0.5420%" height="15" fill="rgb(223,224,47)" fg:x="9" fg:w="6"/><text x="1.0630%" y="127.50"></text></g><g><title>tokio::runtime::park::Inner::park (1 samples, 0.09%)</title><rect x="1.3550%" y="133" width="0.0903%" height="15" fill="rgb(238,102,44)" fg:x="15" fg:w="1"/><text x="1.6050%" y="143.50"></text></g><g><title>tokio::runtime::task::raw::drop_abort_handle (1 samples, 0.09%)</title><rect x="1.4453%" y="133" width="0.0903%" height="15" fill="rgb(236,46,40)" fg:x="16" fg:w="1"/><text x="1.6953%" y="143.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (1 samples, 0.09%)</title><rect x="1.4453%" y="117" width="0.0903%" height="15" fill="rgb(247,202,50)" fg:x="16" fg:w="1"/><text x="1.6953%" y="127.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (6 samples, 0.54%)</title><rect x="1.8067%" y="101" width="0.5420%" height="15" fill="rgb(209,99,20)" fg:x="20" fg:w="6"/><text x="2.0567%" y="111.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::try_read_output (3 samples, 0.27%)</title><rect x="2.0777%" y="85" width="0.2710%" height="15" fill="rgb(252,27,34)" fg:x="23" fg:w="3"/><text x="2.3277%" y="95.50"></text></g><g><title>cfree (8 samples, 0.72%)</title><rect x="2.3487%" y="101" width="0.7227%" height="15" fill="rgb(215,206,23)" fg:x="26" fg:w="8"/><text x="2.5987%" y="111.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (4 samples, 0.36%)</title><rect x="3.2520%" y="69" width="0.3613%" height="15" fill="rgb(212,135,36)" fg:x="36" fg:w="4"/><text x="3.5020%" y="79.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::dealloc (11 samples, 0.99%)</title><rect x="3.0714%" y="101" width="0.9937%" height="15" fill="rgb(240,189,1)" fg:x="34" fg:w="11"/><text x="3.3214%" y="111.50"></text></g><g><title>tokio::util::wake::drop_arc_raw (9 samples, 0.81%)</title><rect x="3.2520%" y="85" width="0.8130%" height="15" fill="rgb(242,56,20)" fg:x="36" fg:w="9"/><text x="3.5020%" y="95.50"></text></g><g><title>cfree (5 samples, 0.45%)</title><rect x="3.6134%" y="69" width="0.4517%" height="15" fill="rgb(247,132,33)" fg:x="40" fg:w="5"/><text x="3.8634%" y="79.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (1 samples, 0.09%)</title><rect x="4.4264%" y="69" width="0.0903%" height="15" fill="rgb(208,149,11)" fg:x="49" fg:w="1"/><text x="4.6764%" y="79.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Stage&lt;mutex_buffered_client::mutex_worker::{{closure}}&gt;&gt; (1 samples, 0.09%)</title><rect x="4.5167%" y="69" width="0.0903%" height="15" fill="rgb(211,33,11)" fg:x="50" fg:w="1"/><text x="4.7667%" y="79.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_join_handle_slow (7 samples, 0.63%)</title><rect x="4.0650%" y="101" width="0.6323%" height="15" fill="rgb(221,29,38)" fg:x="45" fg:w="7"/><text x="4.3150%" y="111.50"></text></g><g><title>std::panicking::try (6 samples, 0.54%)</title><rect x="4.1554%" y="85" width="0.5420%" height="15" fill="rgb(206,182,49)" fg:x="46" fg:w="6"/><text x="4.4054%" y="95.50"></text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (1 samples, 0.09%)</title><rect x="4.6070%" y="69" width="0.0903%" height="15" fill="rgb(216,140,1)" fg:x="51" fg:w="1"/><text x="4.8570%" y="79.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::drop_join_handle_slow (1 samples, 0.09%)</title><rect x="4.6974%" y="101" width="0.0903%" height="15" fill="rgb(232,57,40)" fg:x="52" fg:w="1"/><text x="4.9474%" y="111.50"></text></g><g><title>tokio::runtime::task::state::State::drop_join_handle_fast (2 samples, 0.18%)</title><rect x="4.7877%" y="101" width="0.1807%" height="15" fill="rgb(224,186,18)" fg:x="53" fg:w="2"/><text x="5.0377%" y="111.50"></text></g><g><title>sched_yield (3 samples, 0.27%)</title><rect x="5.1491%" y="53" width="0.2710%" height="15" fill="rgb(215,121,11)" fg:x="57" fg:w="3"/><text x="5.3991%" y="63.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock_slow (5 samples, 0.45%)</title><rect x="5.1491%" y="69" width="0.4517%" height="15" fill="rgb(245,147,10)" fg:x="57" fg:w="5"/><text x="5.3991%" y="79.50"></text></g><g><title>syscall (2 samples, 0.18%)</title><rect x="5.4201%" y="53" width="0.1807%" height="15" fill="rgb(238,153,13)" fg:x="60" fg:w="2"/><text x="5.6701%" y="63.50"></text></g><g><title>sched_yield (1 samples, 0.09%)</title><rect x="5.6007%" y="69" width="0.0903%" height="15" fill="rgb(233,108,0)" fg:x="62" fg:w="1"/><text x="5.8507%" y="79.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (9 samples, 0.81%)</title><rect x="4.9684%" y="85" width="0.8130%" height="15" fill="rgb(212,157,17)" fg:x="55" fg:w="9"/><text x="5.2184%" y="95.50"></text></g><g><title>syscall (1 samples, 0.09%)</title><rect x="5.6911%" y="69" width="0.0903%" height="15" fill="rgb(225,213,38)" fg:x="63" fg:w="1"/><text x="5.9411%" y="79.50"></text></g><g><title>tokio::util::idle_notified_set::EntryInOneOfTheLists&lt;T&gt;::remove (11 samples, 0.99%)</title><rect x="4.9684%" y="101" width="0.9937%" height="15" fill="rgb(248,16,11)" fg:x="55" fg:w="11"/><text x="5.2184%" y="111.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (2 samples, 0.18%)</title><rect x="5.7814%" y="85" width="0.1807%" height="15" fill="rgb(241,33,4)" fg:x="64" fg:w="2"/><text x="6.0314%" y="95.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (2 samples, 0.18%)</title><rect x="5.7814%" y="69" width="0.1807%" height="15" fill="rgb(222,26,43)" fg:x="64" fg:w="2"/><text x="6.0314%" y="79.50"></text></g><g><title>clock_gettime (2 samples, 0.18%)</title><rect x="5.7814%" y="53" width="0.1807%" height="15" fill="rgb(243,29,36)" fg:x="64" fg:w="2"/><text x="6.0314%" y="63.50"></text></g><g><title>sched_yield (2 samples, 0.18%)</title><rect x="7.2267%" y="53" width="0.1807%" height="15" fill="rgb(241,9,27)" fg:x="80" fg:w="2"/><text x="7.4767%" y="63.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock_slow (3 samples, 0.27%)</title><rect x="7.2267%" y="69" width="0.2710%" height="15" fill="rgb(205,117,26)" fg:x="80" fg:w="3"/><text x="7.4767%" y="79.50"></text></g><g><title>syscall (1 samples, 0.09%)</title><rect x="7.4074%" y="53" width="0.0903%" height="15" fill="rgb(209,80,39)" fg:x="82" fg:w="1"/><text x="7.6574%" y="63.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (6 samples, 0.54%)</title><rect x="7.0461%" y="85" width="0.5420%" height="15" fill="rgb(239,155,6)" fg:x="78" fg:w="6"/><text x="7.2961%" y="95.50"></text></g><g><title>sched_yield (1 samples, 0.09%)</title><rect x="7.4977%" y="69" width="0.0903%" height="15" fill="rgb(212,104,12)" fg:x="83" fg:w="1"/><text x="7.7477%" y="79.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (2 samples, 0.18%)</title><rect x="7.5881%" y="85" width="0.1807%" height="15" fill="rgb(234,204,3)" fg:x="84" fg:w="2"/><text x="7.8381%" y="95.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (2 samples, 0.18%)</title><rect x="7.5881%" y="69" width="0.1807%" height="15" fill="rgb(251,218,7)" fg:x="84" fg:w="2"/><text x="7.8381%" y="79.50"></text></g><g><title>clock_gettime (2 samples, 0.18%)</title><rect x="7.5881%" y="53" width="0.1807%" height="15" fill="rgb(221,81,32)" fg:x="84" fg:w="2"/><text x="7.8381%" y="63.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (73 samples, 6.59%)</title><rect x="1.5357%" y="117" width="6.5944%" height="15" fill="rgb(214,152,26)" fg:x="17" fg:w="73"/><text x="1.7857%" y="127.50">&lt;tokio::f..</text></g><g><title>tokio::util::idle_notified_set::IdleNotifiedSet&lt;T&gt;::pop_notified (24 samples, 2.17%)</title><rect x="5.9621%" y="101" width="2.1680%" height="15" fill="rgb(223,22,3)" fg:x="66" fg:w="24"/><text x="6.2121%" y="111.50">t..</text></g><g><title>syscall (4 samples, 0.36%)</title><rect x="7.7687%" y="85" width="0.3613%" height="15" fill="rgb(207,174,7)" fg:x="86" fg:w="4"/><text x="8.0187%" y="95.50"></text></g><g><title>tokio::task::join_set::JoinSet&lt;T&gt;::shutdown::{{closure}} (74 samples, 6.68%)</title><rect x="1.5357%" y="133" width="6.6847%" height="15" fill="rgb(224,19,52)" fg:x="17" fg:w="74"/><text x="1.7857%" y="143.50">tokio::ta..</text></g><g><title>tokio::util::idle_notified_set::IdleNotifiedSet&lt;T&gt;::for_each (1 samples, 0.09%)</title><rect x="8.1301%" y="117" width="0.0903%" height="15" fill="rgb(228,24,14)" fg:x="90" fg:w="1"/><text x="8.3801%" y="127.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::remote_abort (1 samples, 0.09%)</title><rect x="8.1301%" y="101" width="0.0903%" height="15" fill="rgb(230,153,43)" fg:x="90" fg:w="1"/><text x="8.3801%" y="111.50"></text></g><g><title>__rdl_alloc (10 samples, 0.90%)</title><rect x="8.6721%" y="101" width="0.9033%" height="15" fill="rgb(231,106,12)" fg:x="96" fg:w="10"/><text x="8.9221%" y="111.50"></text></g><g><title>posix_memalign (10 samples, 0.90%)</title><rect x="8.6721%" y="85" width="0.9033%" height="15" fill="rgb(215,92,2)" fg:x="96" fg:w="10"/><text x="8.9221%" y="95.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_option_task_without_yield (6 samples, 0.54%)</title><rect x="9.5754%" y="101" width="0.5420%" height="15" fill="rgb(249,143,25)" fg:x="106" fg:w="6"/><text x="9.8254%" y="111.50"></text></g><g><title>tokio::runtime::context::with_scheduler (5 samples, 0.45%)</title><rect x="9.6658%" y="85" width="0.4517%" height="15" fill="rgb(252,7,35)" fg:x="107" fg:w="5"/><text x="9.9158%" y="95.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked_remote (5 samples, 0.45%)</title><rect x="9.6658%" y="69" width="0.4517%" height="15" fill="rgb(216,69,40)" fg:x="107" fg:w="5"/><text x="9.9158%" y="79.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::handle::Handle::bind_new_task (19 samples, 1.72%)</title><rect x="8.5818%" y="117" width="1.7164%" height="15" fill="rgb(240,36,33)" fg:x="95" fg:w="19"/><text x="8.8318%" y="127.50"></text></g><g><title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::bind_inner (2 samples, 0.18%)</title><rect x="10.1174%" y="101" width="0.1807%" height="15" fill="rgb(231,128,14)" fg:x="112" fg:w="2"/><text x="10.3674%" y="111.50"></text></g><g><title>tokio::util::sharded_list::ShardGuard&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push (2 samples, 0.18%)</title><rect x="10.1174%" y="85" width="0.1807%" height="15" fill="rgb(245,143,14)" fg:x="112" fg:w="2"/><text x="10.3674%" y="95.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (1 samples, 0.09%)</title><rect x="10.2078%" y="69" width="0.0903%" height="15" fill="rgb(222,130,28)" fg:x="113" fg:w="1"/><text x="10.4578%" y="79.50"></text></g><g><title>tokio::runtime::task::core::Header::get_trailer (1 samples, 0.09%)</title><rect x="10.2078%" y="53" width="0.0903%" height="15" fill="rgb(212,10,48)" fg:x="113" fg:w="1"/><text x="10.4578%" y="63.50"></text></g><g><title>tokio::runtime::task::harness::can_read_output (2 samples, 0.18%)</title><rect x="10.2981%" y="101" width="0.1807%" height="15" fill="rgb(254,118,45)" fg:x="114" fg:w="2"/><text x="10.5481%" y="111.50"></text></g><g><title>tokio::util::wake::clone_arc_raw (1 samples, 0.09%)</title><rect x="10.3884%" y="85" width="0.0903%" height="15" fill="rgb(228,6,45)" fg:x="115" fg:w="1"/><text x="10.6384%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (119 samples, 10.75%)</title><rect x="0.0000%" y="197" width="10.7498%" height="15" fill="rgb(241,18,35)" fg:x="0" fg:w="119"/><text x="0.2500%" y="207.50">&lt;alloc::vec::Vec..</text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter (119 samples, 10.75%)</title><rect x="0.0000%" y="181" width="10.7498%" height="15" fill="rgb(227,214,53)" fg:x="0" fg:w="119"/><text x="0.2500%" y="191.50">criterion::bench..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (119 samples, 10.75%)</title><rect x="0.0000%" y="165" width="10.7498%" height="15" fill="rgb(224,107,51)" fg:x="0" fg:w="119"/><text x="0.2500%" y="175.50">tokio::runtime::..</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (119 samples, 10.75%)</title><rect x="0.0000%" y="149" width="10.7498%" height="15" fill="rgb(248,60,28)" fg:x="0" fg:w="119"/><text x="0.2500%" y="159.50">tokio::runtime::..</text></g><g><title>tokio::task::join_set::JoinSet&lt;T&gt;::spawn (28 samples, 2.53%)</title><rect x="8.2204%" y="133" width="2.5294%" height="15" fill="rgb(249,101,23)" fg:x="91" fg:w="28"/><text x="8.4704%" y="143.50">to..</text></g><g><title>tokio::task::join_set::JoinSet&lt;T&gt;::insert (5 samples, 0.45%)</title><rect x="10.2981%" y="117" width="0.4517%" height="15" fill="rgb(228,51,19)" fg:x="114" fg:w="5"/><text x="10.5481%" y="127.50"></text></g><g><title>tokio::util::idle_notified_set::IdleNotifiedSet&lt;T&gt;::insert_idle (3 samples, 0.27%)</title><rect x="10.4788%" y="101" width="0.2710%" height="15" fill="rgb(213,20,6)" fg:x="116" fg:w="3"/><text x="10.7288%" y="111.50"></text></g><g><title>__libc_malloc (3 samples, 0.27%)</title><rect x="10.4788%" y="85" width="0.2710%" height="15" fill="rgb(212,124,10)" fg:x="116" fg:w="3"/><text x="10.7288%" y="95.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.18%)</title><rect x="10.7498%" y="133" width="0.1807%" height="15" fill="rgb(248,3,40)" fg:x="119" fg:w="2"/><text x="10.9998%" y="143.50"></text></g><g><title>cfree (2 samples, 0.18%)</title><rect x="10.7498%" y="117" width="0.1807%" height="15" fill="rgb(223,178,23)" fg:x="119" fg:w="2"/><text x="10.9998%" y="127.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.09%)</title><rect x="11.0208%" y="101" width="0.0903%" height="15" fill="rgb(240,132,45)" fg:x="122" fg:w="1"/><text x="11.2708%" y="111.50"></text></g><g><title>&lt;tokio::runtime::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (1 samples, 0.09%)</title><rect x="11.0208%" y="85" width="0.0903%" height="15" fill="rgb(245,164,36)" fg:x="122" fg:w="1"/><text x="11.2708%" y="95.50"></text></g><g><title>cfree (3 samples, 0.27%)</title><rect x="11.1111%" y="101" width="0.2710%" height="15" fill="rgb(231,188,53)" fg:x="123" fg:w="3"/><text x="11.3611%" y="111.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::dealloc (1 samples, 0.09%)</title><rect x="11.3821%" y="101" width="0.0903%" height="15" fill="rgb(237,198,39)" fg:x="126" fg:w="1"/><text x="11.6321%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Stage&lt;mutex_buffered_client::mutex_worker::{{closure}}&gt;&gt; (1 samples, 0.09%)</title><rect x="11.3821%" y="85" width="0.0903%" height="15" fill="rgb(223,120,35)" fg:x="126" fg:w="1"/><text x="11.6321%" y="95.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_join_handle_slow (1 samples, 0.09%)</title><rect x="11.4724%" y="101" width="0.0903%" height="15" fill="rgb(253,107,49)" fg:x="127" fg:w="1"/><text x="11.7224%" y="111.50"></text></g><g><title>std::panicking::try (1 samples, 0.09%)</title><rect x="11.4724%" y="85" width="0.0903%" height="15" fill="rgb(216,44,31)" fg:x="127" fg:w="1"/><text x="11.7224%" y="95.50"></text></g><g><title>sched_yield (1 samples, 0.09%)</title><rect x="11.9241%" y="69" width="0.0903%" height="15" fill="rgb(253,87,21)" fg:x="132" fg:w="1"/><text x="12.1741%" y="79.50"></text></g><g><title>tokio::util::idle_notified_set::EntryInOneOfTheLists&lt;T&gt;::remove (6 samples, 0.54%)</title><rect x="11.5628%" y="101" width="0.5420%" height="15" fill="rgb(226,18,2)" fg:x="128" fg:w="6"/><text x="11.8128%" y="111.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (3 samples, 0.27%)</title><rect x="11.8338%" y="85" width="0.2710%" height="15" fill="rgb(216,8,46)" fg:x="131" fg:w="3"/><text x="12.0838%" y="95.50"></text></g><g><title>syscall (1 samples, 0.09%)</title><rect x="12.0145%" y="69" width="0.0903%" height="15" fill="rgb(226,140,39)" fg:x="133" fg:w="1"/><text x="12.2645%" y="79.50"></text></g><g><title>&lt;tokio::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (16 samples, 1.45%)</title><rect x="10.9304%" y="117" width="1.4453%" height="15" fill="rgb(221,194,54)" fg:x="121" fg:w="16"/><text x="11.1804%" y="127.50"></text></g><g><title>tokio::util::idle_notified_set::IdleNotifiedSet&lt;T&gt;::pop_notified (3 samples, 0.27%)</title><rect x="12.1048%" y="101" width="0.2710%" height="15" fill="rgb(213,92,11)" fg:x="134" fg:w="3"/><text x="12.3548%" y="111.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (3 samples, 0.27%)</title><rect x="12.1048%" y="85" width="0.2710%" height="15" fill="rgb(229,162,46)" fg:x="134" fg:w="3"/><text x="12.3548%" y="95.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock_slow (2 samples, 0.18%)</title><rect x="12.1951%" y="69" width="0.1807%" height="15" fill="rgb(214,111,36)" fg:x="135" fg:w="2"/><text x="12.4451%" y="79.50"></text></g><g><title>sched_yield (1 samples, 0.09%)</title><rect x="12.2855%" y="53" width="0.0903%" height="15" fill="rgb(207,6,21)" fg:x="136" fg:w="1"/><text x="12.5355%" y="63.50"></text></g><g><title>tokio::task::join_set::JoinSet&lt;T&gt;::shutdown::{{closure}} (17 samples, 1.54%)</title><rect x="10.9304%" y="133" width="1.5357%" height="15" fill="rgb(213,127,38)" fg:x="121" fg:w="17"/><text x="11.1804%" y="143.50"></text></g><g><title>tokio::util::idle_notified_set::IdleNotifiedSet&lt;T&gt;::for_each (1 samples, 0.09%)</title><rect x="12.3758%" y="117" width="0.0903%" height="15" fill="rgb(238,118,32)" fg:x="137" fg:w="1"/><text x="12.6258%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.09%)</title><rect x="12.3758%" y="101" width="0.0903%" height="15" fill="rgb(240,139,39)" fg:x="137" fg:w="1"/><text x="12.6258%" y="111.50"></text></g><g><title>__rdl_alloc (1 samples, 0.09%)</title><rect x="12.5565%" y="101" width="0.0903%" height="15" fill="rgb(235,10,37)" fg:x="139" fg:w="1"/><text x="12.8065%" y="111.50"></text></g><g><title>posix_memalign (1 samples, 0.09%)</title><rect x="12.5565%" y="85" width="0.0903%" height="15" fill="rgb(249,171,38)" fg:x="139" fg:w="1"/><text x="12.8065%" y="95.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_option_task_without_yield (2 samples, 0.18%)</title><rect x="12.6468%" y="101" width="0.1807%" height="15" fill="rgb(242,144,32)" fg:x="140" fg:w="2"/><text x="12.8968%" y="111.50"></text></g><g><title>tokio::runtime::context::with_scheduler (2 samples, 0.18%)</title><rect x="12.6468%" y="85" width="0.1807%" height="15" fill="rgb(217,117,21)" fg:x="140" fg:w="2"/><text x="12.8968%" y="95.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked_remote (2 samples, 0.18%)</title><rect x="12.6468%" y="69" width="0.1807%" height="15" fill="rgb(249,87,1)" fg:x="140" fg:w="2"/><text x="12.8968%" y="79.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::handle::Handle::bind_new_task (5 samples, 0.45%)</title><rect x="12.4661%" y="117" width="0.4517%" height="15" fill="rgb(248,196,48)" fg:x="138" fg:w="5"/><text x="12.7161%" y="127.50"></text></g><g><title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::bind_inner (1 samples, 0.09%)</title><rect x="12.8275%" y="101" width="0.0903%" height="15" fill="rgb(251,206,33)" fg:x="142" fg:w="1"/><text x="13.0775%" y="111.50"></text></g><g><title>tokio::util::sharded_list::ShardGuard&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push (1 samples, 0.09%)</title><rect x="12.8275%" y="85" width="0.0903%" height="15" fill="rgb(232,141,28)" fg:x="142" fg:w="1"/><text x="13.0775%" y="95.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (1 samples, 0.09%)</title><rect x="12.8275%" y="69" width="0.0903%" height="15" fill="rgb(209,167,14)" fg:x="142" fg:w="1"/><text x="13.0775%" y="79.50"></text></g><g><title>tokio::runtime::task::harness::can_read_output (1 samples, 0.09%)</title><rect x="13.0081%" y="101" width="0.0903%" height="15" fill="rgb(225,11,50)" fg:x="144" fg:w="1"/><text x="13.2581%" y="111.50"></text></g><g><title>tokio::util::wake::clone_arc_raw (1 samples, 0.09%)</title><rect x="13.0081%" y="85" width="0.0903%" height="15" fill="rgb(209,50,20)" fg:x="144" fg:w="1"/><text x="13.2581%" y="95.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::ref_inc (1 samples, 0.09%)</title><rect x="13.0985%" y="101" width="0.0903%" height="15" fill="rgb(212,17,46)" fg:x="145" fg:w="1"/><text x="13.3485%" y="111.50"></text></g><g><title>bench-2325e866d (149 samples, 13.46%)</title><rect x="0.0000%" y="373" width="13.4598%" height="15" fill="rgb(216,101,39)" fg:x="0" fg:w="149"/><text x="0.2500%" y="383.50">bench-2325e866d</text></g><g><title>_start (149 samples, 13.46%)</title><rect x="0.0000%" y="357" width="13.4598%" height="15" fill="rgb(212,228,48)" fg:x="0" fg:w="149"/><text x="0.2500%" y="367.50">_start</text></g><g><title>__libc_start_main (149 samples, 13.46%)</title><rect x="0.0000%" y="341" width="13.4598%" height="15" fill="rgb(250,6,50)" fg:x="0" fg:w="149"/><text x="0.2500%" y="351.50">__libc_start_main</text></g><g><title>main (149 samples, 13.46%)</title><rect x="0.0000%" y="325" width="13.4598%" height="15" fill="rgb(250,160,48)" fg:x="0" fg:w="149"/><text x="0.2500%" y="335.50">main</text></g><g><title>std::rt::lang_start_internal (149 samples, 13.46%)</title><rect x="0.0000%" y="309" width="13.4598%" height="15" fill="rgb(244,216,33)" fg:x="0" fg:w="149"/><text x="0.2500%" y="319.50">std::rt::lang_start_..</text></g><g><title>std::rt::lang_start::{{closure}} (149 samples, 13.46%)</title><rect x="0.0000%" y="293" width="13.4598%" height="15" fill="rgb(207,157,5)" fg:x="0" fg:w="149"/><text x="0.2500%" y="303.50">std::rt::lang_start:..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (149 samples, 13.46%)</title><rect x="0.0000%" y="277" width="13.4598%" height="15" fill="rgb(228,199,8)" fg:x="0" fg:w="149"/><text x="0.2500%" y="287.50">std::sys_common::bac..</text></g><g><title>bench::main (149 samples, 13.46%)</title><rect x="0.0000%" y="261" width="13.4598%" height="15" fill="rgb(227,80,20)" fg:x="0" fg:w="149"/><text x="0.2500%" y="271.50">bench::main</text></g><g><title>criterion::Criterion&lt;M&gt;::bench_with_input (149 samples, 13.46%)</title><rect x="0.0000%" y="245" width="13.4598%" height="15" fill="rgb(222,9,33)" fg:x="0" fg:w="149"/><text x="0.2500%" y="255.50">criterion::Criterion..</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input (149 samples, 13.46%)</title><rect x="0.0000%" y="229" width="13.4598%" height="15" fill="rgb(239,44,28)" fg:x="0" fg:w="149"/><text x="0.2500%" y="239.50">criterion::benchmark..</text></g><g><title>criterion::routine::Routine::profile (149 samples, 13.46%)</title><rect x="0.0000%" y="213" width="13.4598%" height="15" fill="rgb(249,187,43)" fg:x="0" fg:w="149"/><text x="0.2500%" y="223.50">criterion::routine::..</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (30 samples, 2.71%)</title><rect x="10.7498%" y="197" width="2.7100%" height="15" fill="rgb(216,141,28)" fg:x="119" fg:w="30"/><text x="10.9998%" y="207.50">&lt;c..</text></g><g><title>criterion::bencher::AsyncBencher&lt;A,M&gt;::iter (30 samples, 2.71%)</title><rect x="10.7498%" y="181" width="2.7100%" height="15" fill="rgb(230,154,53)" fg:x="119" fg:w="30"/><text x="10.9998%" y="191.50">cr..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (30 samples, 2.71%)</title><rect x="10.7498%" y="165" width="2.7100%" height="15" fill="rgb(227,82,4)" fg:x="119" fg:w="30"/><text x="10.9998%" y="175.50">to..</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (30 samples, 2.71%)</title><rect x="10.7498%" y="149" width="2.7100%" height="15" fill="rgb(220,107,16)" fg:x="119" fg:w="30"/><text x="10.9998%" y="159.50">to..</text></g><g><title>tokio::task::join_set::JoinSet&lt;T&gt;::spawn (11 samples, 0.99%)</title><rect x="12.4661%" y="133" width="0.9937%" height="15" fill="rgb(207,187,2)" fg:x="138" fg:w="11"/><text x="12.7161%" y="143.50"></text></g><g><title>tokio::task::join_set::JoinSet&lt;T&gt;::insert (6 samples, 0.54%)</title><rect x="12.9178%" y="117" width="0.5420%" height="15" fill="rgb(210,162,52)" fg:x="143" fg:w="6"/><text x="13.1678%" y="127.50"></text></g><g><title>tokio::util::idle_notified_set::IdleNotifiedSet&lt;T&gt;::insert_idle (3 samples, 0.27%)</title><rect x="13.1888%" y="101" width="0.2710%" height="15" fill="rgb(217,216,49)" fg:x="146" fg:w="3"/><text x="13.4388%" y="111.50"></text></g><g><title>__libc_malloc (3 samples, 0.27%)</title><rect x="13.1888%" y="85" width="0.2710%" height="15" fill="rgb(218,146,49)" fg:x="146" fg:w="3"/><text x="13.4388%" y="95.50"></text></g><g><title>__lll_lock_wait_private (1 samples, 0.09%)</title><rect x="13.3695%" y="69" width="0.0903%" height="15" fill="rgb(216,55,40)" fg:x="148" fg:w="1"/><text x="13.6195%" y="79.50"></text></g><g><title>powf32x (1 samples, 0.09%)</title><rect x="14.2728%" y="213" width="0.0903%" height="15" fill="rgb(208,196,21)" fg:x="158" fg:w="1"/><text x="14.5228%" y="223.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (6 samples, 0.54%)</title><rect x="14.3631%" y="213" width="0.5420%" height="15" fill="rgb(242,117,42)" fg:x="159" fg:w="6"/><text x="14.6131%" y="223.50"></text></g><g><title>clock_gettime (6 samples, 0.54%)</title><rect x="14.3631%" y="197" width="0.5420%" height="15" fill="rgb(210,11,23)" fg:x="159" fg:w="6"/><text x="14.6131%" y="207.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (2 samples, 0.18%)</title><rect x="14.9955%" y="197" width="0.1807%" height="15" fill="rgb(217,110,2)" fg:x="166" fg:w="2"/><text x="15.2455%" y="207.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (2 samples, 0.18%)</title><rect x="14.9955%" y="181" width="0.1807%" height="15" fill="rgb(229,77,54)" fg:x="166" fg:w="2"/><text x="15.2455%" y="191.50"></text></g><g><title>syscall (2 samples, 0.18%)</title><rect x="14.9955%" y="165" width="0.1807%" height="15" fill="rgb(218,53,16)" fg:x="166" fg:w="2"/><text x="15.2455%" y="175.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (1 samples, 0.09%)</title><rect x="15.1762%" y="197" width="0.0903%" height="15" fill="rgb(215,38,13)" fg:x="168" fg:w="1"/><text x="15.4262%" y="207.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (1 samples, 0.09%)</title><rect x="15.1762%" y="181" width="0.0903%" height="15" fill="rgb(235,42,18)" fg:x="168" fg:w="1"/><text x="15.4262%" y="191.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (2 samples, 0.18%)</title><rect x="15.3568%" y="181" width="0.1807%" height="15" fill="rgb(219,66,54)" fg:x="170" fg:w="2"/><text x="15.6068%" y="191.50"></text></g><g><title>clock_gettime (2 samples, 0.18%)</title><rect x="15.3568%" y="165" width="0.1807%" height="15" fill="rgb(222,205,4)" fg:x="170" fg:w="2"/><text x="15.6068%" y="175.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (9 samples, 0.81%)</title><rect x="14.9051%" y="213" width="0.8130%" height="15" fill="rgb(227,213,46)" fg:x="165" fg:w="9"/><text x="15.1551%" y="223.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (5 samples, 0.45%)</title><rect x="15.2665%" y="197" width="0.4517%" height="15" fill="rgb(250,145,42)" fg:x="169" fg:w="5"/><text x="15.5165%" y="207.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (2 samples, 0.18%)</title><rect x="15.5375%" y="181" width="0.1807%" height="15" fill="rgb(219,15,2)" fg:x="172" fg:w="2"/><text x="15.7875%" y="191.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (2 samples, 0.18%)</title><rect x="15.5375%" y="165" width="0.1807%" height="15" fill="rgb(231,181,52)" fg:x="172" fg:w="2"/><text x="15.7875%" y="175.50"></text></g><g><title>epoll_wait (2 samples, 0.18%)</title><rect x="15.5375%" y="149" width="0.1807%" height="15" fill="rgb(235,1,42)" fg:x="172" fg:w="2"/><text x="15.7875%" y="159.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (1 samples, 0.09%)</title><rect x="16.6215%" y="197" width="0.0903%" height="15" fill="rgb(249,88,27)" fg:x="184" fg:w="1"/><text x="16.8715%" y="207.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.09%)</title><rect x="16.6215%" y="181" width="0.0903%" height="15" fill="rgb(235,145,16)" fg:x="184" fg:w="1"/><text x="16.8715%" y="191.50"></text></g><g><title>clock_gettime (1 samples, 0.09%)</title><rect x="16.6215%" y="165" width="0.0903%" height="15" fill="rgb(237,114,19)" fg:x="184" fg:w="1"/><text x="16.8715%" y="175.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (1 samples, 0.09%)</title><rect x="16.9828%" y="181" width="0.0903%" height="15" fill="rgb(238,51,50)" fg:x="188" fg:w="1"/><text x="17.2328%" y="191.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (1 samples, 0.09%)</title><rect x="17.2538%" y="165" width="0.0903%" height="15" fill="rgb(205,194,25)" fg:x="191" fg:w="1"/><text x="17.5038%" y="175.50"></text></g><g><title>std::panicking::try (9 samples, 0.81%)</title><rect x="17.0732%" y="181" width="0.8130%" height="15" fill="rgb(215,203,17)" fg:x="189" fg:w="9"/><text x="17.3232%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Stage&lt;mutex_buffered_client::mutex_worker::{{closure}}&gt;&gt; (6 samples, 0.54%)</title><rect x="17.3442%" y="165" width="0.5420%" height="15" fill="rgb(233,112,49)" fg:x="192" fg:w="6"/><text x="17.5942%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (12 samples, 1.08%)</title><rect x="27.1906%" y="149" width="1.0840%" height="15" fill="rgb(241,130,26)" fg:x="301" fg:w="12"/><text x="27.4406%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (11 samples, 0.99%)</title><rect x="27.2809%" y="133" width="0.9937%" height="15" fill="rgb(252,223,19)" fg:x="302" fg:w="11"/><text x="27.5309%" y="143.50"></text></g><g><title>realloc (11 samples, 0.99%)</title><rect x="27.2809%" y="117" width="0.9937%" height="15" fill="rgb(211,95,25)" fg:x="302" fg:w="11"/><text x="27.5309%" y="127.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (203 samples, 18.34%)</title><rect x="28.2746%" y="149" width="18.3379%" height="15" fill="rgb(251,182,27)" fg:x="313" fg:w="203"/><text x="28.5246%" y="159.50">std::sys::sync::mutex::futex:..</text></g><g><title>syscall (128 samples, 11.56%)</title><rect x="35.0497%" y="133" width="11.5628%" height="15" fill="rgb(238,24,4)" fg:x="388" fg:w="128"/><text x="35.2997%" y="143.50">syscall</text></g><g><title>std::sys::sync::mutex::futex::Mutex::wake (1 samples, 0.09%)</title><rect x="46.6125%" y="149" width="0.0903%" height="15" fill="rgb(224,220,25)" fg:x="516" fg:w="1"/><text x="46.8625%" y="159.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (416 samples, 37.58%)</title><rect x="17.8862%" y="181" width="37.5790%" height="15" fill="rgb(239,133,26)" fg:x="198" fg:w="416"/><text x="18.1362%" y="191.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>mutex_buffered_client::mutex_worker::{{closure}} (416 samples, 37.58%)</title><rect x="17.8862%" y="165" width="37.5790%" height="15" fill="rgb(211,94,48)" fg:x="198" fg:w="416"/><text x="18.1362%" y="175.50">mutex_buffered_client::mutex_worker::{{closure}}</text></g><g><title>syscall (97 samples, 8.76%)</title><rect x="46.7028%" y="149" width="8.7624%" height="15" fill="rgb(239,87,6)" fg:x="517" fg:w="97"/><text x="46.9528%" y="159.50">syscall</text></g><g><title>sched_yield (73 samples, 6.59%)</title><rect x="67.4797%" y="85" width="6.5944%" height="15" fill="rgb(227,62,0)" fg:x="747" fg:w="73"/><text x="67.7297%" y="95.50">sched_yie..</text></g><g><title>parking_lot_core::word_lock::WordLock::lock_slow (153 samples, 13.82%)</title><rect x="64.0470%" y="101" width="13.8211%" height="15" fill="rgb(211,226,4)" fg:x="709" fg:w="153"/><text x="64.2970%" y="111.50">parking_lot_core::wor..</text></g><g><title>syscall (42 samples, 3.79%)</title><rect x="74.0741%" y="85" width="3.7940%" height="15" fill="rgb(253,38,52)" fg:x="820" fg:w="42"/><text x="74.3241%" y="95.50">sysc..</text></g><g><title>parking_lot_core::word_lock::WordLock::unlock_slow (1 samples, 0.09%)</title><rect x="77.8681%" y="101" width="0.0903%" height="15" fill="rgb(229,126,40)" fg:x="862" fg:w="1"/><text x="78.1181%" y="111.50"></text></g><g><title>sched_yield (47 samples, 4.25%)</title><rect x="77.9584%" y="101" width="4.2457%" height="15" fill="rgb(229,165,44)" fg:x="863" fg:w="47"/><text x="78.2084%" y="111.50">sched..</text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (316 samples, 28.55%)</title><rect x="59.7109%" y="117" width="28.5456%" height="15" fill="rgb(247,95,47)" fg:x="661" fg:w="316"/><text x="59.9609%" y="127.50">parking_lot::raw_mutex::RawMutex::lock_slow</text></g><g><title>syscall (67 samples, 6.05%)</title><rect x="82.2042%" y="101" width="6.0524%" height="15" fill="rgb(216,140,30)" fg:x="910" fg:w="67"/><text x="82.4542%" y="111.50">syscall</text></g><g><title>&lt;tokio::util::idle_notified_set::ListEntry&lt;T&gt; as tokio::util::wake::Wake&gt;::wake_by_ref (355 samples, 32.07%)</title><rect x="56.2782%" y="133" width="32.0687%" height="15" fill="rgb(246,214,8)" fg:x="623" fg:w="355"/><text x="56.5282%" y="143.50">&lt;tokio::util::idle_notified_set::ListEntry&lt;T&gt; as tok..</text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (1 samples, 0.09%)</title><rect x="88.2565%" y="117" width="0.0903%" height="15" fill="rgb(227,224,15)" fg:x="977" fg:w="1"/><text x="88.5065%" y="127.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.09%)</title><rect x="88.2565%" y="101" width="0.0903%" height="15" fill="rgb(233,175,4)" fg:x="977" fg:w="1"/><text x="88.5065%" y="111.50"></text></g><g><title>clock_gettime (1 samples, 0.09%)</title><rect x="88.2565%" y="85" width="0.0903%" height="15" fill="rgb(221,66,45)" fg:x="977" fg:w="1"/><text x="88.5065%" y="95.50"></text></g><g><title>sched_yield (2 samples, 0.18%)</title><rect x="89.7922%" y="101" width="0.1807%" height="15" fill="rgb(221,178,18)" fg:x="994" fg:w="2"/><text x="90.0422%" y="111.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock_slow (7 samples, 0.63%)</title><rect x="89.5212%" y="117" width="0.6323%" height="15" fill="rgb(213,81,29)" fg:x="991" fg:w="7"/><text x="89.7712%" y="127.50"></text></g><g><title>syscall (2 samples, 0.18%)</title><rect x="89.9729%" y="101" width="0.1807%" height="15" fill="rgb(220,89,49)" fg:x="996" fg:w="2"/><text x="90.2229%" y="111.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::unlock_slow (5 samples, 0.45%)</title><rect x="90.1536%" y="117" width="0.4517%" height="15" fill="rgb(227,60,33)" fg:x="998" fg:w="5"/><text x="90.4036%" y="127.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (24 samples, 2.17%)</title><rect x="90.6052%" y="117" width="2.1680%" height="15" fill="rgb(205,113,12)" fg:x="1003" fg:w="24"/><text x="90.8552%" y="127.50">s..</text></g><g><title>clock_gettime (24 samples, 2.17%)</title><rect x="90.6052%" y="101" width="2.1680%" height="15" fill="rgb(211,32,1)" fg:x="1003" fg:w="24"/><text x="90.8552%" y="111.50">c..</text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (66 samples, 5.96%)</title><rect x="88.3469%" y="133" width="5.9621%" height="15" fill="rgb(246,2,12)" fg:x="978" fg:w="66"/><text x="88.5969%" y="143.50">parking_..</text></g><g><title>syscall (17 samples, 1.54%)</title><rect x="92.7733%" y="117" width="1.5357%" height="15" fill="rgb(243,37,27)" fg:x="1027" fg:w="17"/><text x="93.0233%" y="127.50"></text></g><g><title>std::panicking::try (460 samples, 41.55%)</title><rect x="56.0072%" y="165" width="41.5537%" height="15" fill="rgb(248,211,31)" fg:x="620" fg:w="460"/><text x="56.2572%" y="175.50">std::panicking::try</text></g><g><title>tokio::util::wake::wake_by_ref_arc_raw (458 samples, 41.37%)</title><rect x="56.1879%" y="149" width="41.3731%" height="15" fill="rgb(242,146,47)" fg:x="622" fg:w="458"/><text x="56.4379%" y="159.50">tokio::util::wake::wake_by_ref_arc_raw</text></g><g><title>syscall (36 samples, 3.25%)</title><rect x="94.3089%" y="133" width="3.2520%" height="15" fill="rgb(206,70,20)" fg:x="1044" fg:w="36"/><text x="94.5589%" y="143.50">sys..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::release (5 samples, 0.45%)</title><rect x="97.5610%" y="165" width="0.4517%" height="15" fill="rgb(215,10,51)" fg:x="1080" fg:w="5"/><text x="97.8110%" y="175.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_complete (1 samples, 0.09%)</title><rect x="98.0126%" y="165" width="0.0903%" height="15" fill="rgb(243,178,53)" fg:x="1085" fg:w="1"/><text x="98.2626%" y="175.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (489 samples, 44.17%)</title><rect x="55.4652%" y="181" width="44.1734%" height="15" fill="rgb(233,221,20)" fg:x="614" fg:w="489"/><text x="55.7152%" y="191.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete</text></g><g><title>tokio::util::sharded_list::ShardedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::remove (17 samples, 1.54%)</title><rect x="98.1030%" y="165" width="1.5357%" height="15" fill="rgb(218,95,35)" fg:x="1086" fg:w="17"/><text x="98.3530%" y="175.50"></text></g><g><title>all (1,107 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(229,13,5)" fg:x="0" fg:w="1107"/><text x="0.2500%" y="399.50"></text></g><g><title>tokio-runtime-w (958 samples, 86.54%)</title><rect x="13.4598%" y="373" width="86.5402%" height="15" fill="rgb(252,164,30)" fg:x="149" fg:w="958"/><text x="13.7098%" y="383.50">tokio-runtime-w</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (958 samples, 86.54%)</title><rect x="13.4598%" y="357" width="86.5402%" height="15" fill="rgb(232,68,36)" fg:x="149" fg:w="958"/><text x="13.7098%" y="367.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (958 samples, 86.54%)</title><rect x="13.4598%" y="341" width="86.5402%" height="15" fill="rgb(219,59,54)" fg:x="149" fg:w="958"/><text x="13.7098%" y="351.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (958 samples, 86.54%)</title><rect x="13.4598%" y="325" width="86.5402%" height="15" fill="rgb(250,92,33)" fg:x="149" fg:w="958"/><text x="13.7098%" y="335.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (958 samples, 86.54%)</title><rect x="13.4598%" y="309" width="86.5402%" height="15" fill="rgb(229,162,54)" fg:x="149" fg:w="958"/><text x="13.7098%" y="319.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (958 samples, 86.54%)</title><rect x="13.4598%" y="293" width="86.5402%" height="15" fill="rgb(244,114,52)" fg:x="149" fg:w="958"/><text x="13.7098%" y="303.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (958 samples, 86.54%)</title><rect x="13.4598%" y="277" width="86.5402%" height="15" fill="rgb(212,211,43)" fg:x="149" fg:w="958"/><text x="13.7098%" y="287.50">tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (958 samples, 86.54%)</title><rect x="13.4598%" y="261" width="86.5402%" height="15" fill="rgb(226,147,8)" fg:x="149" fg:w="958"/><text x="13.7098%" y="271.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::context::set_scheduler (958 samples, 86.54%)</title><rect x="13.4598%" y="245" width="86.5402%" height="15" fill="rgb(226,23,13)" fg:x="149" fg:w="958"/><text x="13.7098%" y="255.50">tokio::runtime::context::set_scheduler</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (958 samples, 86.54%)</title><rect x="13.4598%" y="229" width="86.5402%" height="15" fill="rgb(240,63,4)" fg:x="149" fg:w="958"/><text x="13.7098%" y="239.50">tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (933 samples, 84.28%)</title><rect x="15.7182%" y="213" width="84.2818%" height="15" fill="rgb(221,1,32)" fg:x="174" fg:w="933"/><text x="15.9682%" y="223.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (922 samples, 83.29%)</title><rect x="16.7118%" y="197" width="83.2882%" height="15" fill="rgb(242,117,10)" fg:x="185" fg:w="922"/><text x="16.9618%" y="207.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::state::State::transition_to_running (4 samples, 0.36%)</title><rect x="99.6387%" y="181" width="0.3613%" height="15" fill="rgb(249,172,44)" fg:x="1103" fg:w="4"/><text x="99.8887%" y="191.50"></text></g></svg></svg>
